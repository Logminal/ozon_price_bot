import requests
import json
from config import *
from get_actions import *
from telegram_notify import send_telegram_message


headers = {
    'Content-Type': 'application/json; charset=utf-8',
    'Api-Key': API_KEY,
    'Client-Id': CLIENT_ID,
}

def get_products_in_actions():
    count = 0
    products_in_action = []  # —Å—é–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã
    for action in ids_actions:
        current_last_id = None
        last_id = None  # —Å–Ω–∞—á–∞–ª–∞ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –±—Ä–∞–ª–∏ ‚Äî –ø–æ—ç—Ç–æ–º—É None

        while True:
            # 1. –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å
            params = {
                "action_id": action['action_id'],
                "limit": 100
            }
            if last_id is not None:
                params["last_id"] = last_id  # –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(urls_get_product_in_actions, json=params, headers=headers)
            data = response.json()

            # 3. –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ
            products = data["result"]["products"]
            total_on_page = len(products)

            # 4. –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –æ–±—â—É—é –∫–æ—Ä–æ–±–∫—É
            products_in_action.extend(products)

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã?
            if total_on_page < 100:
                break  # –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 100 ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—á–∫–∞
            else:
                # –∏–Ω–∞—á–µ ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º last_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                last_id = data["result"]["last_id"]
    # print(products_in_action)
    return products_in_action

get_products_in_actions()


def calc_price():
    products_in_action = get_products_in_actions()
    products_big_action = []
    for product in products_in_action:
        calc_price_procent = product['price'] * 0.69
        if calc_price_procent <= product['action_price']:
            continue
        else:
            # print(f"–ø–æ—Å: {calc_price_procent} ------- —Ü–µ–Ω–∞ –æ–∑–æ–Ω: {product['action_price']}")
            # print(calc_price_procent == action['action_price'])
            # print(f"ID —Ç–æ–≤–∞—Ä–∞ {product['id']}.–°–∫–∏–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ 30%")
            products_big_action.append(product['id'])

    return products_big_action


def delete_products_action():
    products = calc_price()
    id_action = ''
    for action in ids_actions:
        id_action = action['action_id']

        if len(products) >0:
            params = {
                'action_id': id_action,
                'product_ids': products
            }
            response = requests.post(delete_tovar_in_action, json=params, headers=headers)
            # print(response.json())

            result = response.json()['result']
            success_count = len(result['product_ids'])
            rejected_count = len(result['rejected'])
            total_requested = len(params['product_ids'])
            message = (
                f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ü–∏–∏: <b>{action['title']}</b>\n"
                f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {total_requested}\n"
                f"‚úîÔ∏è –£–¥–∞–ª–µ–Ω–æ: {success_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–µ–Ω–æ: {rejected_count}"
            )
            if result['rejected']:
                message += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–µ–Ω–æ: {len(result['rejected'])} —à—Ç."
        else:
            message = "–í—Å–µ —Å—É–ø–µ—Ä‚úÖ –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∞–∫—Ü–∏—è 30%üëå"

        send_telegram_message(message)

        # print(message)
